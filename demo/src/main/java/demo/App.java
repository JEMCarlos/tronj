/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package demo;

import com.github.ki5fpl.tronj.abi.FunctionEncoder;
import com.github.ki5fpl.tronj.abi.FunctionReturnDecoder;
import com.github.ki5fpl.tronj.abi.TypeReference;
import com.github.ki5fpl.tronj.abi.datatypes.*;
import com.github.ki5fpl.tronj.abi.datatypes.generated.Bytes10;
import com.github.ki5fpl.tronj.abi.datatypes.generated.Uint256;
import com.github.ki5fpl.tronj.abi.datatypes.generated.Uint32;
import java.math.BigInteger;
import java.util.*;

public class App {
    public String encodeFunctionCalling() {
        System.out.println("! function sam(bytes _, bool _, address _, uint[])");
        Function function = new Function("sam",
            Arrays.asList(
                new DynamicBytes("dave".getBytes()),
                new Bool(true),
                new Address("T9yKC9LCoVvmhaFxKcdK9iL18TUWtyFtjh"),
                new DynamicArray<>(
                    new Uint(BigInteger.ONE),
                    new Uint(BigInteger.valueOf(2)),
                    new Uint(BigInteger.valueOf(3))
                )
            ),
            Collections.emptyList());
        String encodedHex = FunctionEncoder.encode(function);
        return encodedHex;
    }

    public void decodeFunctionReturn() {
        Function function = new Function("test", Collections.<Type>emptyList(),
            Arrays.asList(new TypeReference<Uint>() {}, new TypeReference<Address>() {}));

        List<Type> outputs = FunctionReturnDecoder.decode(
            "0000000000000000000000000000000000000000000000000000000000000037"
            + "00000000000000000000000028263f17875e4f277a72f6c6910bb7a692108b3e",
                         function.getOutputParameters());
        for (Type obj : outputs) {
            System.out.println(obj.getTypeAsString() + "  " + obj.toString());
            if (Uint.class.isInstance(obj)) {
                System.out.println("  parsed value => " + ((Uint)obj).getValue());
            }
        }
        //assertEquals(outputs,
        //    (Arrays.asList(new Uint(BigInteger.valueOf(55)), new Uint(BigInteger.valueOf(7)))));
    }

    public void trc20Encode() {
        Function trc20Transfer = new Function("transfer",
            Arrays.asList(
                new Address("TV3KSjZHF4o6bC92SMrjhNJ3RE65xHNDuo"),
                new Uint256(BigInteger.valueOf(1000).multiply(BigInteger.valueOf(10).pow(18)))
            ),
            Arrays.asList(new TypeReference<Bool>() {}));

        String encodedHex = FunctionEncoder.encode(trc20Transfer);
        System.out.println("! encoding a TRC20 transfer");
        System.out.println(encodedHex);
    }

    public static void main(String[] args) {
        App app = new App();
        System.out.println(app.encodeFunctionCalling());

        app.decodeFunctionReturn();
        app.trc20Encode();
    }
}
